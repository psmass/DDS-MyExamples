/*
 * @(#)lua_binding_ddsConnector.h    generated by: makeheader    Thu Jun 22 14:18:07 2017
 *
 *		built from:	ddsConnector.ifc
 */

#ifndef lua_binding_ddsConnector_h
#define lua_binding_ddsConnector_h



#ifdef __cplusplus
    extern "C" {
#endif

#ifndef lua_binding_dll_h
  #include "lua_binding/lua_binding_dll.h"
#endif




/* Forward declaration */
struct lua_State;
struct RTIDDSConnector;

struct RTIDDSConnectorConfiguration {
    /*RTIBool*/ int onDataEventEnabled;
};

/*e \ingroup RTIDDSConnector
 *
 * @brief Assert the scripts to be executed when \ref RTIDDSConnector_execute is called
 *
 * @param self \st_in the connector
 * @param fileIntervalInSec \st_Interval in seconds at which the lua
          script is checked for changes.
          A negative value disable reloads
 * @param luaFileName \st_in the name of the file containing the
 *        script to execute
 * @param luaScript \st_in the pointer to a string containing the script
 *         to execute
 *
 * Note: This function does no make a copy. So the pointers have to point
 *       to valid content when RTILuaConnector_execute it's called
 *
 * \see RTILuaConnector_execute
 */
void RTIDDSConnector_assertCode(
        struct RTIDDSConnector *self,
        char *luaScript,
        char *luaFileName,
        int fileIntervalInSec);

/*e \ingroup RTIDDSConnector
 *
 * @brief execute the scripts specified in \ref RTIDDSConnector_assertCode
 *
 * @param self \st_in the connector
 *
 * \see RTIDDSConnector_assertCode
 *
 */
int RTIDDSConnector_execute(
    struct RTIDDSConnector *self);

typedef int (*RTIDDSConnectorFunction)(struct lua_State *L);

/*e \ingroup RTIDDSConnector
 *
 */
int RTIDDSConnector_setFunctionIntoContext(
    struct RTIDDSConnector *self,
    const char* name,
    RTIDDSConnectorFunction fun);

/*e \ingroup RTIDDSConnector
 *
 */
int RTIDDSConnector_setNumberIntoContext(
    struct RTIDDSConnector *self,
    const char* name,
    double value);

/*e \ingroup RTIDDSLuaConnector
 *
 */
int RTIDDSConnector_setStringIntoContext(
    struct RTIDDSConnector *self,
    const char* name,
    char *value);

/*e \ingroup RTIDDSConnector
 *
 */
int RTIDDSConnector_setBooleanIntoContext(
    struct RTIDDSConnector *self,
    const char* name,
    /*DDS_Boolean*/ unsigned char value);

/*e \ingroup RTIDDSConnector
 *
 */
int RTIDDSConnector_getNumberFromContext(
    struct RTIDDSConnector *self,
    const char* name,
    double *value);

/*e \ingroup RTIDDSConnector
 *
 */
int RTIDDSConnector_getStringFromContext(
    struct RTIDDSConnector *self,
    const char* name,
    const char **value);

/*e \ingroup RTIDDSConnector
 *
 */
int RTIDDSConnector_getBooleanFromContext(
    struct RTIDDSConnector *self,
    const char* name,
    /*DDS_Boolean*/ unsigned char *value);

/******/

/*e \ingroup RTIDDSConnector
 *
 * @brief Delete an instance of the RTIDDSConnector
 *
 * @param self \st_in is the object to be deleted
 *
 */
extern LUABINDINGDllExport void RTIDDSConnector_delete(
        struct RTIDDSConnector *self);


/*e \ingroup RTIDDSConnector
 *
 * @brief Create a new instance of the RTIDDSConnector
 *
 * @param configName \st_in is the name of the configuration to load
 *
 * @param configFile \st_in is the path to the configuration file. It can be NULL
 *
 *
 * @param connectorConfig \st_in contains configuration parameters for the
 * connectorConfig. It can be NULL
 *
 * @return a new instance of the RTIDDSConnector
 *
 */
extern LUABINDINGDllExport struct RTIDDSConnector * RTIDDSConnector_new(
    const char *configName,
    const char *configFile,
    struct RTIDDSConnectorConfiguration *connectorConfig);


/*e \ingroup RTIDDSConnector
 *
 * @brief Create a new instance of the RTIDDSConnector
 *
 * @param participant \st_in is the participant. It cannot be NULL
 *
 * @param containerName \st_in is the name of the Container. It cannot be NULL
 *
 * @param connectorConfig \st_in contains configuration parameters for the
 * connectorConfig. It can be NULL
 *
 * @return a new instance of the RTIDDSConnector
 *
 */
extern LUABINDINGDllExport struct RTIDDSConnector * RTIDDSConnector_new_from_participant(
    void *participant, const char *containerName,
    struct RTIDDSConnectorConfiguration *connectorConfig);




#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* lua_binding_ddsConnector_h */
