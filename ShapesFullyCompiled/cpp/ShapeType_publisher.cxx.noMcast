/*
* (c) Copyright, Real-Time Innovations, 2012.  All rights reserved.
* RTI grants Licensee a license to use, modify, compile, and create derivative
* works of the software solely for use with RTI Connext DDS. Licensee may
* redistribute copies of the software provided that all such copies are subject
* to this license. The software is provided "as is", with no warranty of any
* type, including any warranty for fitness for any purpose. RTI is under no
* obligation to maintain or support the software. RTI shall not be liable for
* any incidental or consequential damages arising out of the use or inability
* to use the software.
*/

/* ShapeType_publisher.cxx

A publication of data of type ShapeTypeExtended

This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language C++ -example <arch> ShapeType.idl

Example publication of type ShapeTypeExtended automatically generated by 
'rtiddsgen'. To test it, follow these steps:

(1) Compile this file and the example subscription.

(2) Start the subscription

(3) Start the publication

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS. 

You can run any number of publisher and subscriber programs, and can 
add and remove them dynamically from the domain.
*/

#include <stdio.h>
#include <stdlib.h>

#include "ShapeType.h"
#include "ShapeTypeSupport.h"
#include "ndds/ndds_cpp.h"
#include "monitor/monitor_common.h"  // Added to support static monitor libs

/* Delete all entities */
static int publisher_shutdown(
    DDSDomainParticipant *participant)
{
    DDS_ReturnCode_t retcode;
    int status = 0;

    if (participant != NULL) {
        retcode = participant->delete_contained_entities();
        if (retcode != DDS_RETCODE_OK) {
            fprintf(stderr, "delete_contained_entities error %d\n", retcode);
            status = -1;
        }

        retcode = DDSTheParticipantFactory->delete_participant(participant);
        if (retcode != DDS_RETCODE_OK) {
            fprintf(stderr, "delete_participant error %d\n", retcode);
            status = -1;
        }
    }

    /* RTI Connext provides finalize_instance() method on
    domain participant factory for people who want to release memory used
    by the participant factory. Uncomment the following block of code for
    clean destruction of the singleton. */
    /*

    retcode = DDSDomainParticipantFactory::finalize_instance();
    if (retcode != DDS_RETCODE_OK) {
        fprintf(stderr, "finalize_instance error %d\n", retcode);
        status = -1;
    }
    */

    return status;
}

extern "C" int publisher_main(int domainId, int sample_count)
{
    DDSDomainParticipant *participant = NULL;
    DDSPublisher *publisher = NULL;
    DDS_DomainParticipantQos participant_qos;
    DDSTopic *topic = NULL;
    DDSDataWriter *writer = NULL;
    ShapeTypeExtendedDataWriter * shapeTypeExtended_writer = NULL;
    ShapeTypeExtended *instance = NULL;
    DDS_ReturnCode_t retcode;
    DDS_InstanceHandle_t instance_handle = DDS_HANDLE_NIL;
    const char *type_name = NULL;
    int count = 0;  
    DDS_Duration_t send_period = {0,200000000};

    /* To customize participant QoS, use 
    the configuration file USER_QOS_PROFILES.xml */

    // Create a participant here and comment out QoS and Monitor settings bellow
    // or keep this create Participant commented out and uncomment one or both
    // the setting of discovery peers or static lib monitor enable
    /*
    // create partipant from QoS default
    participant = DDSTheParticipantFactory->create_participant(
        domainId, DDS_PARTICIPANT_QOS_DEFAULT, 
        NULL , DDS_STATUS_MASK_NONE);
    */
    


    // set new initial peer for sending discovery information  
    //    participant_qos.discovery.initial_peers.maximum(3);


    // Enable Monitoring as part of qos settings for STATIC Libs - use make file for dyn libs
    // *********  uncomment out to below ************************************
    retcode = DDSTheParticipantFactory->get_default_participant_qos(participant_qos);
    if (retcode !=DDS_RETCODE_OK) {
        fprintf(stderr, "get_default_participant_qos error\n");
        publisher_shutdown(participant);
        return -1;
    }


    // This block is used to disable the automatic participant upon startup as required
    // to disable Multicast (we enable explicitly enable after we creat the particpant below.
    DDS_DomainParticipantFactoryQos factory_qos;
    retcode = DDSTheParticipantFactory->get_qos(factory_qos);
    factory_qos.entity_factory.autoenable_created_entities = DDS_BOOLEAN_FALSE;
    retcode = DDSTheParticipantFactory->set_qos(factory_qos);


    /*
    // This property indicates that the DomainParticipant 
    //   has monitoring turned on. The property name MUST be  
    //   "rti.monitor.library". The value can be anything.
    retcode = DDSPropertyQosPolicyHelper::add_property(
	participant_qos.property,
	"rti.monitor.library", "rtimonitoring", DDS_BOOLEAN_FALSE); 
    if (retcode != DDS_RETCODE_OK) {
        fprintf(stderr, "add_property rtimonitoring error\n");
        publisher_shutdown(participant);
        return -1; 
    }
    // The property name "rti.monitor.create_function" 
    //   indicates the entry point for the monitoring library. 
    //   The value MUST be the value of the function pointer of 
    //   RTIDefaultMonitor_create 
   
    retcode = DDSPropertyQosPolicyHelper::add_pointer_property(
        participant_qos.property,
        "rti.monitor.create_function_ptr", 
        (void *) RTIDefaultMonitor_create);
    if (retcode!= DDS_RETCODE_OK) { 
        fprintf(stderr, "add_pointer_property rtimonitoring \n");
        publisher_shutdown(participant);
        return -1;
    }
    // ********************* end monitor enable ****************
    */
    // free original memory 
    participant_qos.discovery.initial_peers.maximum(0);
    
    // set new initial peer for sending discovery information
    participant_qos.discovery.initial_peers.maximum(1);
    participant_qos.discovery.initial_peers.length(1);
    participant_qos.discovery.initial_peers[0] = DDS_String_dup("192.168.1.202");
    
    // disable multicast
    participant_qos.discovery.multicast_receive_addresses.maximum(0);
    participant_qos.discovery.multicast_receive_addresses.length(0);


    /*
    // free original memory 
    participant_qos.discovery.initial_peers.maximum(0);

    //Remove network / (SHMEM Only) from default peers.
    participant_qos.discovery.initial_peers.maximum(2);
    participant_qos.discovery.initial_peers.length(2);
    participant_qos.discovery.initial_peers[0] =
    // DDS_String_dup("builtin.shmem://");
    DDS_String_dup("192.168.1.204");
    participant_qos.discovery.initial_peers[1] =
        DDS_String_dup("239.255.40.1");
    // DDS_String_dup("builtin.udpv4://127.0.0.1");

    // free original memory 
    participant_qos.discovery.multicast_receive_addresses.maximum(0);

    participant_qos.discovery.multicast_receive_addresses.maximum(1);
    participant_qos.discovery.multicast_receive_addresses.length(1);
    participant_qos.discovery.multicast_receive_addresses[0] =    DDS_String_dup("239.255.20.1");
    */

    participant = DDSTheParticipantFactory->create_participant(
                  domainId, participant_qos,
                 NULL,
                 DDS_STATUS_MASK_NONE); 
    
    if (participant == NULL) {
        fprintf(stderr, "create_participant error\n");
        publisher_shutdown(participant);
        return -1;
    }

    struct NDDS_Transport_UDPv4_Property_t UDPv4Properties
      =  NDDS_TRANSPORT_UDPV4_PROPERTY_DEFAULT;
 
    if (NDDSTransportSupport::get_builtin_transport_property(
	     participant, DDS_TRANSPORTBUILTIN_UDPv4,
	     (struct NDDS_Transport_Property_t&)UDPv4Properties)
	!= DDS_RETCODE_OK) {
      printf("***Error: get builtin transport property\n");
    }
 
    UDPv4Properties.multicast_enabled = 0;

    printf("********** FOO PUBLISHER Start set transport\n");
 
    if (NDDSTransportSupport::set_builtin_transport_property(participant, DDS_TRANSPORTBUILTIN_UDPv4, (struct NDDS_Transport_Property_t&)UDPv4Properties)!= DDS_RETCODE_OK) {
      printf("***Error: set builtin transport property\n");
    }

    printf("********** FOO PUBLISHER End set transport\n");

    retcode = participant->enable();
    

    

    /* To customize publisher QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    publisher = participant->create_publisher(  
        DDS_PUBLISHER_QOS_DEFAULT, NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (publisher == NULL) {
        fprintf(stderr, "create_publisher error\n");
        publisher_shutdown(participant);
        return -1;
    }

    /* Register type before creating topic */
    type_name = ShapeTypeExtendedTypeSupport::get_type_name();
    retcode = ShapeTypeExtendedTypeSupport::register_type(
        participant, type_name);
    if (retcode != DDS_RETCODE_OK) {
        fprintf(stderr, "register_type error %d\n", retcode);
        publisher_shutdown(participant);
        return -1;
    }

    /* To customize topic QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    topic = participant->create_topic(
        "Square",
        type_name, DDS_TOPIC_QOS_DEFAULT, NULL /* listener */,
        DDS_STATUS_MASK_NONE);
    if (topic == NULL) {
        fprintf(stderr, "create_topic error\n");
        publisher_shutdown(participant);
        return -1;
    }

    /* To customize data writer QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    writer = publisher->create_datawriter(
        topic, DDS_DATAWRITER_QOS_DEFAULT, NULL /* listener */,
        DDS_STATUS_MASK_NONE);
    if (writer == NULL) {
        fprintf(stderr, "create_datawriter error\n");
        publisher_shutdown(participant);
        return -1;
    }

    shapeTypeExtended_writer = ShapeTypeExtendedDataWriter::narrow(writer);
    if (shapeTypeExtended_writer == NULL) {
        fprintf(stderr, "DataWriter narrow error\n");
        publisher_shutdown(participant);
        return -1;
    }

    /* Create data sample for writing */
    instance = ShapeTypeExtendedTypeSupport::create_data();
    if (instance == NULL) {
        fprintf(stderr, "ShapeTypeExtendedTypeSupport::create_data error\n");
        publisher_shutdown(participant);
        return -1;
    }

    char t_blue[] = "BLUE";
    instance->color=t_blue;
    instance->shapesize=30;

    /* For a data type that has a key, if the same instance is going to be
    written multiple times, initialize the key here
    and register the keyed instance prior to writing */

    // instance_handle = ShapeTypeExtended_writer->register_instance(*instance);
    int xdelta = 2;
	int ydelta = 5;
	int xmax = 250;
	int ymax = 250;
    /* Main loop */
    for (count=0; (sample_count == 0) || (count < sample_count); ++count) {

        instance->x += xdelta;
        if (instance->x > xmax || instance->x < 0) xdelta = xdelta * -1;
        instance->y += ydelta;
        if (instance->y > ymax || instance->y < 0) ydelta = ydelta * -1;

        printf("Writing ShapeTypeExtended, count %d\n", count);

        /* Modify the data to be sent here */

        retcode = shapeTypeExtended_writer->write(*instance, instance_handle);
        if (retcode != DDS_RETCODE_OK) {
            fprintf(stderr, "write error %d\n", retcode);
        }

        NDDSUtility::sleep(send_period);
    }
    /*
    retcode = shapeTypeExtended_writer->unregister_instance(
        *instance, instance_handle);
    if (retcode != DDS_RETCODE_OK) {
        fprintf(stderr, "unregister instance error %d\n", retcode);
    }
    */

    /* Delete data sample */
    retcode = ShapeTypeExtendedTypeSupport::delete_data(instance);
    if (retcode != DDS_RETCODE_OK) {
        fprintf(stderr, "ShapeTypeExtendedTypeSupport::delete_data error %d\n", retcode);
    }

    /* Delete all entities */
    return publisher_shutdown(participant);
}

int main(int argc, char *argv[])
{
    int domain_id = 0;
    int sample_count = 0; /* infinite loop */

    if (argc >= 2) {
        domain_id = atoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = atoi(argv[2]);
    }

    /* Uncomment this to turn on additional logging
    NDDSConfigLogger::get_instance()->
    set_verbosity_by_category(NDDS_CONFIG_LOG_CATEGORY_API, 
    NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
    */

    return publisher_main(domain_id, sample_count);
}

