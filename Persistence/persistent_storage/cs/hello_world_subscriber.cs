/*******************************************************************************
 (c) 2005-2014 Copyright, Real-Time Innovations, Inc.  All rights reserved.
 RTI grants Licensee a license to use, modify, compile, and create derivative
 works of the Software.  Licensee has the right to distribute object form only
 for use with RTI products.  The Software is provided "as is", with no warranty
 of any type, including any warranty for fitness for any purpose. RTI is under
 no obligation to maintain or support the Software.  RTI shall not be liable for
 any incidental or consequential damages arising out of the use or inability to
 use the software.
 ******************************************************************************/
using System;
using System.Collections.Generic;
using System.Text;
/* hello_world_subscriber.cs

   A subscription example

   This file is derived from code automatically generated by the rtiddsgen 
   command:

   rtiddsgen -language C# -example <arch> hello_world.idl

   Example subscription of type hello_world automatically generated by 
   'rtiddsgen'. To test them, follow these steps:

   (1) Compile this file and the example publication.

   (2) Start the subscription with the command
       objs\<arch>\hello_world_subscriber <domain_id> <sample_count>

   (3) Start the publication with the command
       objs\<arch>\hello_world_publisher <domain_id> <sample_count>

   (4) [Optional] Specify the list of discovery initial peers and 
       multicast receive addresses via an environment variable or a file 
       (in the current working directory) called NDDS_DISCOVERY_PEERS. 

   You can run any number of publishers and subscribers programs, and can 
   add and remove them dynamically from the domain.
                                   
   Example:
        
       To run the example application on domain <domain_id>:
                          
       bin\<Debug|Release>\hello_world_publisher <domain_id> <sample_count>  
       bin\<Debug|Release>\hello_world_subscriber <domain_id> <sample_count>
              
       
modification history
------------ -------
*/

public class hello_worldSubscriber {

    public class hello_worldListener : DDS.DataReaderListener {

        public override void on_requested_deadline_missed(
            DDS.DataReader reader,
            ref DDS.RequestedDeadlineMissedStatus status ) { }

        public override void on_requested_incompatible_qos(
            DDS.DataReader reader,
            DDS.RequestedIncompatibleQosStatus status ) { }

        public override void on_sample_rejected(
            DDS.DataReader reader,
            ref DDS.SampleRejectedStatus status ) { }

        public override void on_liveliness_changed(
            DDS.DataReader reader,
            ref DDS.LivelinessChangedStatus status ) { }

        public override void on_sample_lost(
            DDS.DataReader reader,
            ref DDS.SampleLostStatus status ) { }

        public override void on_subscription_matched(
            DDS.DataReader reader,
            ref DDS.SubscriptionMatchedStatus status ) { }

        public override void on_data_available( DDS.DataReader reader ) {
            hello_worldDataReader hello_world_reader =
                (hello_worldDataReader)reader;

            try {
                hello_world_reader.take(
                    data_seq,
                    info_seq,
                    DDS.ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                    DDS.SampleStateKind.ANY_SAMPLE_STATE,
                    DDS.ViewStateKind.ANY_VIEW_STATE,
                    DDS.InstanceStateKind.ANY_INSTANCE_STATE);
            } catch (DDS.Retcode_NoData) {
                return;
            } catch (DDS.Exception e) {
                Console.WriteLine("take error {0}", e);
                return;
            }

            System.Int32 data_length = data_seq.length;
            for (int i = 0; i < data_length; ++i) {
                if (info_seq.get_at(i).valid_data) {
                    hello_worldTypeSupport.print_data(data_seq.get_at(i));
                }
            }

            try {
                hello_world_reader.return_loan(data_seq, info_seq);
            } catch (DDS.Exception e) {
                Console.WriteLine("return loan error {0}", e);
            }
        }

        public hello_worldListener() {
            data_seq = new hello_worldSeq();
            info_seq = new DDS.SampleInfoSeq();
        }

        private hello_worldSeq data_seq;
        private DDS.SampleInfoSeq info_seq;
    };


    // This function will take the values from the command line parameters
    private static int READ_INTEGER_PARAM( int i, String parameter,
            String[] args, String syntax ) {
        if (args[i].Equals(parameter)) {
            if (i + 1 >= args.Length) {
                Console.WriteLine(syntax);
                return -1;
            }
            return int.Parse(args[i + 1]);
        }
        return 0;
    }

    public static void Main( string[] args ) {

        int domain_id = 0;
        int sample_count = 0;
        int drs = 0;

        String syntax = "[options] \n"
                + "-domain_id <domain ID> (default: 0)\n"
                + "-sample_count <number of published samples> "
                + "(default: infinite)\n"
                + "-drs <1|0> Enable/Disable durable reader state "
                + "(default: 0)";

        for (int i = 0; i < args.Length; ++i) {
            if (domain_id == 0) {
                domain_id = READ_INTEGER_PARAM(i, "-domain_id", args, syntax);
            }

            if (sample_count == 0) {
                sample_count = READ_INTEGER_PARAM(i, "-sample_count", args,
                        syntax);
            }

            if (drs == 0) {
                drs = READ_INTEGER_PARAM(i, "-drs", args, syntax);
            }
        }

        /* Uncomment this to turn on additional logging
        NDDS.ConfigLogger.get_instance().set_verbosity_by_category(
            NDDS.LogCategory.NDDS_CONFIG_LOG_CATEGORY_API, 
            NDDS.LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
        */

        // --- Run --- //
        try {
            hello_worldSubscriber.subscribe(
                domain_id, sample_count, drs);
        } catch (DDS.Exception) {
            Console.WriteLine("error in subscriber");
        }
    }

    static void subscribe(int domain_id, int sample_count, int drs) {

        // --- Create participant --- //

        /* To customize the participant QoS, use 
           the configuration file USER_QOS_PROFILES.xml */
        DDS.DomainParticipant participant =
            DDS.DomainParticipantFactory.get_instance().create_participant(
                domain_id,
                DDS.DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
                null /* listener */,
                DDS.StatusMask.STATUS_MASK_NONE);
        if (participant == null) {
            shutdown(participant);
            throw new ApplicationException("create_participant error");
        }

        // --- Create subscriber --- //

        /* To customize the subscriber QoS, use 
           the configuration file USER_QOS_PROFILES.xml */
        DDS.Subscriber subscriber = participant.create_subscriber(
            DDS.DomainParticipant.SUBSCRIBER_QOS_DEFAULT,
            null /* listener */,
            DDS.StatusMask.STATUS_MASK_NONE);
        if (subscriber == null) {
            shutdown(participant);
            throw new ApplicationException("create_subscriber error");
        }

        // --- Create topic --- //

        /* Register the type before creating the topic */
        System.String type_name = hello_worldTypeSupport.get_type_name();
        try {
            hello_worldTypeSupport.register_type(
                participant, type_name);
        } catch (DDS.Exception e) {
            Console.WriteLine("register_type error {0}", e);
            shutdown(participant);
            throw e;
        }

        /* To customize the topic QoS, use 
           the configuration file USER_QOS_PROFILES.xml */
        DDS.Topic topic = participant.create_topic(
            "Example hello_world",
            type_name,
            DDS.DomainParticipant.TOPIC_QOS_DEFAULT,
            null /* listener */,
            DDS.StatusMask.STATUS_MASK_NONE);
        if (topic == null) {
            shutdown(participant);
            throw new ApplicationException("create_topic error");
        }

        // --- Create reader --- //

        /* Create a data reader listener */
        hello_worldListener reader_listener =
            new hello_worldListener();
        DDS.DataReader reader = null;

        /* If you use Durable Reader State, you need to set up several properties.
         * In this example, we have modified them using a QoS XML profile. See
         * further details in USER_QOS_PROFILES.xml.
         */

        if (drs == 1) {
            reader = subscriber.create_datareader_with_profile(topic,
                "persistence_example_Library",
                "durable_reader_state_Profile",
                reader_listener, DDS.StatusMask.STATUS_MASK_ALL);
        } else {
            reader = subscriber.create_datareader_with_profile(topic,
                "persistence_example_Library",
                "persistence_service_Profile",
                reader_listener, DDS.StatusMask.STATUS_MASK_ALL);
        }

        if (reader == null) {
            shutdown(participant);
            reader_listener = null;
            throw new ApplicationException("create_datareader error");
        }

        // --- Wait for data --- //

        /* Main loop */
        const System.Int32 receive_period = 4000; // milliseconds
        for (int count = 0;
             (sample_count == 0) || (count < sample_count);
             ++count) {
            Console.WriteLine(
                "hello_world subscriber sleeping for {0} sec...",
                receive_period / 1000);

            System.Threading.Thread.Sleep(receive_period);
        }

        // --- Shutdown --- //

        /* Delete all entities */
        shutdown(participant);
        reader_listener = null;
    }


    static void shutdown(
        DDS.DomainParticipant participant ) {

        /* Delete all entities */

        if (participant != null) {
            participant.delete_contained_entities();
            DDS.DomainParticipantFactory.get_instance().delete_participant(
                ref participant);
        }

        /* RTI Connext provides finalize_instance() method on
           domain participant factory for users who want to release memory
           used by the participant factory. Uncomment the following block of
           code for clean destruction of the singleton. */
        /*
        try {
            DDS.DomainParticipantFactory.finalize_instance();
        }
        catch(DDS.Exception e) {
            Console.WriteLine("finalize_instance error {0}", e);
            throw e;
        }
        */
    }
}


